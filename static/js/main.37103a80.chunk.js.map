{"version":3,"sources":["AuthContext.js","Header.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","AuthProvider","Props","useState","auth","setAuth","useEffect","token","localStorage","getItem","email","Provider","value","children","Header","authContext","useContext","className","onClick","removeItem","Login","setEmail","password","setPassword","type","placeholder","onChange","e","target","preventDefault","setItem","alert","App","AppWithStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uKAEaA,EAAcC,IAAMC,gBAE1B,SAASC,EAAaC,GACzB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,qBAAU,WACN,IAAMC,EAAQC,aAAaC,QAAQ,SAC7BC,EAAQF,aAAaC,QAAQ,SAGhCC,GACCL,EAAQ,CACJE,QAAOG,YAIhB,IAGC,cAACZ,EAAYa,SAAb,CAAsBC,MAAO,CAACR,OAAMC,WAApC,SACKH,EAAMW,WCnBJ,SAASC,IACpB,IAAMC,EAAcC,qBAAWlB,GAQ/B,OACI,sBAAKmB,UAAU,yCAAf,UACI,mBAAGA,UAAU,uBAAb,yBAEA,8BACKF,EAAYX,KAAKM,MAAQ,gCACrBK,EAAYX,KAAKM,MACjB,IACD,wBAAQO,UAAU,wBAAwBC,QAd1D,WACIV,aAAaW,WAAW,SACxBX,aAAaW,WAAW,SACxBJ,EAAYV,QAAQ,KAWR,uBACK,yBClBV,SAASe,IACpB,MAA0BjB,mBAAS,IAAnC,mBAAOO,EAAP,KAAcW,EAAd,KACA,EAAgClB,mBAAS,IAAzC,mBAAOmB,EAAP,KAAiBC,EAAjB,KACMR,EAAcC,qBAAWlB,GAiB/B,OACI,iCACI,uCAEA,uBAAO0B,KAAK,QAAQP,UAAU,eAAeQ,YAAY,QAAQb,MAAOF,EACpEgB,SAAU,SAAAC,GAAC,OAAIN,EAASM,EAAEC,OAAOhB,UACrC,uBACA,uBAAOY,KAAK,WAAWP,UAAU,eAAeQ,YAAY,WAAWb,MAAOU,EAC1EI,SAAU,SAAAC,GAAC,OAAIJ,EAAYI,EAAEC,OAAOhB,UACxC,uBACA,wBAAQK,UAAU,kBAAkBC,QAzB5C,SAAeS,GAKX,GAJAA,EAAEE,iBAIc,QAAbP,EAAmB,CAElBd,aAAasB,QAAQ,QADP,OAEdtB,aAAasB,QAAQ,QAASpB,GAC9BK,EAAYV,QAAQ,CAACE,MAHP,MAGcG,eAE5BqB,MAAM,kBAcN,sBC5BZ,SAASC,IACP,IAAMjB,EAAcC,qBAAWlB,GAE/B,OACE,sBAAKmB,UAAU,YAAf,UACE,cAACH,EAAD,IACCC,EAAYX,KAAKM,MAAQ,UAAY,cAACU,EAAD,OAW7Ba,MANf,WACE,OAAQ,cAAChC,EAAD,UACN,cAAC+B,EAAD,OCNgBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.37103a80.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nexport const AuthContext = React.createContext();\n\nexport function AuthProvider(Props){\n    const [auth, setAuth] = useState({});\n\n    useEffect(() => {\n        const token = localStorage.getItem('token');\n        const email = localStorage.getItem('email');\n\n        // @todo: validate token with api\n        if(email){\n            setAuth({\n                token, email\n            });\n        }\n\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{auth, setAuth}}>\n            {Props.children}\n        </AuthContext.Provider>\n    );\n\n}\n","import React, {useContext} from 'react';\nimport {AuthContext} from \"./AuthContext\";\n\nexport default function Header(){\n    const authContext = useContext(AuthContext);\n\n    function logout(){\n        localStorage.removeItem('token');\n        localStorage.removeItem('email');\n        authContext.setAuth({});\n    }\n\n    return (\n        <nav className=\"navbar navbar-light bg-light mt-2 mb-2\">\n            <a className=\"navbar-brand mb-0 h1\">React Hooks</a>\n            \n            <div>\n                {authContext.auth.email ? <div>\n                    {authContext.auth.email}\n                    {' '}\n                    <button className=\"btn btn-danger btn-sm\" onClick={logout}>Logout</button>\n                </div> : 'you need to login'}\n            </div>\n        </nav>\n    );\n}\n","import React, {useState, useContext} from 'react';\nimport {AuthContext} from \"./AuthContext\";\n\nexport default function Login(){\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const authContext = useContext(AuthContext);\n\n    function login(e){\n        e.preventDefault();\n        \n        // @todo: send api request to validate data and get token\n\n        if(password === '123'){\n            const token = 'abc';\n            localStorage.setItem('token', token);\n            localStorage.setItem('email', email);\n            authContext.setAuth({token, email});\n        } else {\n            alert('wrong details');\n        }\n    }\n\n    return (\n        <form>\n            <h2>Login</h2>\n\n            <input type=\"email\" className=\"form-control\" placeholder=\"email\" value={email} \n                onChange={e => setEmail(e.target.value)} />\n            <br />\n            <input type=\"password\" className=\"form-control\" placeholder=\"password\" value={password} \n                onChange={e => setPassword(e.target.value)} />\n            <br />\n            <button className=\"btn btn-primary\" onClick={login}>Login</button>\n        </form>\n    );\n}\n","import React, { useContext } from 'react';\nimport Header from \"./Header\";\nimport Login from \"./Login\";\nimport {AuthProvider, AuthContext} from \"./AuthContext\";\n\nfunction App() {\n  const authContext = useContext(AuthContext);\n\n  return (\n    <div className=\"container\">\n      <Header />\n      {authContext.auth.email ? 'welcome' : <Login />}\n    </div>\n  );\n}\n\nfunction AppWithStore(){\n  return (<AuthProvider>\n    <App />\n  </AuthProvider>);\n}\n\nexport default AppWithStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}